; Chloe Johnson and Anna Novak
; Professor Dickerson
; CSCI 0390
; May 14, 2018


; Observer context
;to migrate
;  ask traveling-patches with [total-fish > 0] [
;    let good-neighbors find-good-neighbors
;    ask good-neighbors [
;      migrate-zero-to-four
;      migrate-five-to-nine
;      migrate-ten-to-fourteen
;      migrate-fifteen-to-nineteen
;      migrate-twenty-to-twenty-four      
;      migrate-twenty-four-to-twenty-nine
;      set total-fish fish-on-patch
;      ask myself [set total-fish fish-on-patch]
;    ]
;  ]
;end


; Move fish population up the coast by transferring a number of fish from each age category to
; eligible patches (patches ahead, above, or below with respect to the coastline)  
; Observer context
to migrate
  ask traveling-patches with [total-fish > 0] [
    set good-neighbors traveling-patches in-radius 10 with [
      (closest-coast > [closest-coast] of myself and closest-coast < [closest-coast] of myself + 10) or 
      ((pxcor = [pxcor] of myself or pxcor = [pxcor] of myself + 10 or pxcor = [pxcor] of myself + 10)
      and (pycor = [pycor] of myself
        or pycor = [pycor] of myself + 7
        or pycor = [pycor] of myself - 7
        or pycor = [pycor] of myself + 9
        or pycor = [pycor] of myself - 9))]
    ;or closest-coast = [closest-coast] of myself]
    ;let good-neighbors traveling-patches with [closest-coast > [closest-coast] of myself and (closest-coast < [closest-coast] of myself + 10)]
    ask good-neighbors [
      migrate-zero-to-four
      migrate-five-to-nine
      migrate-ten-to-fourteen
      migrate-fifteen-to-nineteen
      migrate-twenty-to-twenty-four      
      migrate-twenty-four-to-twenty-nine
      set total-fish fish-on-patch
      ask myself [set total-fish fish-on-patch]
    ]
  ]  
end


; Move fish population up the coast by transferring a number of fish from each age category to
; eligible patches (patches ahead, above, or below with respect to the coastline)  
; Adapted from sample-migrate.netlogo by Matthew Dickerson
to migrate2
  let new-fish-patches []
  
  foreach fish-patches [ p -> ask p [ set visited? false]]
  foreach fish-patches [ p -> ask p [
;    let good-neighbors traveling-patches in-radius 10 with [
   ; show count good-neighbors
    ask good-neighbors [
      migrate-zero-to-four
      migrate-five-to-nine
      migrate-ten-to-fourteen    
      migrate-fifteen-to-nineteen
      migrate-twenty-to-twenty-four      
      migrate-twenty-four-to-twenty-nine
      set total-fish fish-on-patch
     ;ask myself [set total-fish fish-on-patch]
      
      if not visited? and total-fish > 0  [
        set visited? true
        set new-fish-patches fput self new-fish-patches
      ]
    ]
    
    set total-fish fish-on-patch 
    
    if total-fish > 0 [
     set visited? true
      set new-fish-patches fput self new-fish-patches
    ]
    ]
  ]
  
  set fish-patches new-fish-patches
  
  foreach fish-patches [p -> ask p [ set total-fish fish-on-patch]]
  
end


; Increases this patch's popoulation of fish in age group 0-4 by a percentage of the population of fish 0-4 on
; the asking patch
; Patch context
to migrate-zero-to-four
  let n-zero-to-four (random-float migratory-distribution-variability) * [zero-to-four] of myself
  let frac-zero-to-four n-zero-to-four - (floor n-zero-to-four)
  let floor-zero-to-four floor n-zero-to-four
  let prob random-float 1
  if prob < frac-zero-to-four [ set floor-zero-to-four floor-zero-to-four + 1 ]
  set zero-to-four zero-to-four + floor-zero-to-four
  ask myself [set zero-to-four zero-to-four - floor-zero-to-four]
end


; Patch context
to migrate-five-to-nine
  let n-five-to-nine (random-float migratory-distribution-variability) * [five-to-nine] of myself
  let frac-five-to-nine n-five-to-nine - (floor n-five-to-nine)
  let floor-five-to-nine floor n-five-to-nine
  let prob random-float 1
  if prob < frac-five-to-nine [ set floor-five-to-nine floor-five-to-nine + 1 ]
  set five-to-nine five-to-nine + floor-five-to-nine
  ask myself [set five-to-nine five-to-nine - floor-five-to-nine]
end


; Patch context
to migrate-ten-to-fourteen
  let n-ten-to-fourteen (random-float migratory-distribution-variability) * [ten-to-fourteen] of myself
  let frac-ten-to-fourteen n-ten-to-fourteen - (floor n-ten-to-fourteen)
  let floor-ten-to-fourteen floor n-ten-to-fourteen
  let prob random-float 1
  if prob < frac-ten-to-fourteen [ set floor-ten-to-fourteen floor-ten-to-fourteen + 1 ]
  set ten-to-fourteen ten-to-fourteen + floor-ten-to-fourteen
  ask myself [set ten-to-fourteen ten-to-fourteen - floor-ten-to-fourteen]
end


; Patch context
to migrate-fifteen-to-nineteen
  let n-fifteen-to-nineteen (random-float migratory-distribution-variability) * [fifteen-to-nineteen] of myself
  let frac-fifteen-to-nineteen n-fifteen-to-nineteen - (floor n-fifteen-to-nineteen)
  let floor-fifteen-to-nineteen floor n-fifteen-to-nineteen
  let prob random-float 1
  if prob < frac-fifteen-to-nineteen [ set floor-fifteen-to-nineteen floor-fifteen-to-nineteen + 1 ]
  set fifteen-to-nineteen fifteen-to-nineteen + floor-fifteen-to-nineteen
  ask myself [set fifteen-to-nineteen fifteen-to-nineteen - floor-fifteen-to-nineteen]
end


; Patch context
to migrate-twenty-to-twenty-four
  let n-twenty-to-twenty-four (random-float migratory-distribution-variability) * [twenty-to-twenty-four] of myself
  let frac-twenty-to-twenty-four n-twenty-to-twenty-four - (floor n-twenty-to-twenty-four)
  let floor-twenty-to-twenty-four floor n-twenty-to-twenty-four
  let prob random-float 1
  if prob < frac-twenty-to-twenty-four [ set floor-twenty-to-twenty-four floor-twenty-to-twenty-four + 1 ]
  set twenty-to-twenty-four twenty-to-twenty-four + floor-twenty-to-twenty-four
  ask myself [set twenty-to-twenty-four twenty-to-twenty-four - floor-twenty-to-twenty-four]
end
      

; Patch context
to migrate-twenty-four-to-twenty-nine
  let n-twenty-five-to-twenty-nine (random-float migratory-distribution-variability) * [twenty-five-to-twenty-nine] of myself
  let frac-twenty-five-to-twenty-nine n-twenty-five-to-twenty-nine - (floor n-twenty-five-to-twenty-nine)
  let floor-twenty-five-to-twenty-nine floor n-twenty-five-to-twenty-nine
  let prob random-float 1
  if prob < frac-twenty-five-to-twenty-nine [ set floor-twenty-five-to-twenty-nine floor-twenty-five-to-twenty-nine + 1 ]
  set twenty-five-to-twenty-nine twenty-five-to-twenty-nine + floor-twenty-five-to-twenty-nine
  ask myself [set twenty-five-to-twenty-nine twenty-five-to-twenty-nine - floor-twenty-five-to-twenty-nine]
end

